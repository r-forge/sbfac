
R version 2.12.2 (2011-02-25)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-apple-darwin9.8.0/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "sbfac"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('sbfac')
Loading required package: Rcpp
Loading required package: RcppArmadillo
Loading required package: ggplot2
Loading required package: reshape
Loading required package: plyr

Attaching package: 'reshape'

The following object(s) are masked from 'package:plyr':

    round_any

Loading required package: grid
Loading required package: proto
> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("plotLoadingsHeat")
> ### * plotLoadingsHeat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotLoadingsHeat
> ### Title: insert here the title
> ### Aliases: plotLoadingsHeat
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (Z_, A_, F_, tauinv_, rho_) 
+ .Call("updateSparseLoadingsJ", Z_, A_, F_, tauinv_, rho_, PACKAGE = "sbfac")
function (Z_, A_, F_, tauinv_, rho_) 
.Call("updateSparseLoadingsJ", Z_, A_, F_, tauinv_, rho_, PACKAGE = "sbfac")
> 
> 
> 
> cleanEx()
> nameEx("updateLoadingsVarC")
> ### * updateLoadingsVarC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: updateLoadingsVarC
> ### Title: insert here the title
> ### Aliases: updateLoadingsVarC
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (tauinv_, A_, taua_, taub_) 
+ .Call("updateLoadingsVarC", tauinv_, A_, taua_, taub_, PACKAGE = "sbfac")
function (tauinv_, A_, taua_, taub_) 
.Call("updateLoadingsVarC", tauinv_, A_, taua_, taub_, PACKAGE = "sbfac")
> 
> 
> 
> cleanEx()
> nameEx("updateLoadingsVarJC")
> ### * updateLoadingsVarJC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pdateLoadingsVarJC
> ### Title: insert here the title
> ### Aliases: pdateLoadingsVarJC
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (tauinv_, A_, taua_, taub_) 
+ .Call("pdateLoadingsVarJC", tauinv_, A_, taua_, taub_, PACKAGE = "sbfac")
function (tauinv_, A_, taua_, taub_) 
.Call("pdateLoadingsVarJC", tauinv_, A_, taua_, taub_, PACKAGE = "sbfac")
> 
> 
> 
> cleanEx()
> nameEx("updateRho")
> ### * updateRho
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: updateRho
> ### Title: insert here the title
> ### Aliases: updateRho
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (rho_, A_, rhoa_, rhob_) 
+ .Call("updateRho", rho_, A_, rhoa_, rhob_, PACKAGE = "sbfac")
function (rho_, A_, rhoa_, rhob_) 
.Call("updateRho", rho_, A_, rhoa_, rhob_, PACKAGE = "sbfac")
> 
> 
> 
> cleanEx()
> nameEx("updateScoresC")
> ### * updateScoresC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: updateScoresC
> ### Title: insert here the title
> ### Aliases: updateScoresC
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (Z_, A_, F_) 
+ .Call("updateScoresC", Z_, A_, F_, PACKAGE = "sbfac")
function (Z_, A_, F_) 
.Call("updateScoresC", Z_, A_, F_, PACKAGE = "sbfac")
> 
> 
> 
> cleanEx()
> nameEx("updateSparseLoadings")
> ### * updateSparseLoadings
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: updateSparseLoadings
> ### Title: insert here the title
> ### Aliases: updateSparseLoadings
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (Z_, A_, F_, tauinv_, rho_) 
+ .Call("updateSparseLoadings", Z_, A_, F_, tauinv_, rho_, PACKAGE = "sbfac")
function (Z_, A_, F_, tauinv_, rho_) 
.Call("updateSparseLoadings", Z_, A_, F_, tauinv_, rho_, PACKAGE = "sbfac")
> 
> 
> 
> cleanEx()
> nameEx("updateSparseLoadingsJ")
> ### * updateSparseLoadingsJ
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: updateSparseLoadingsJ
> ### Title: insert here the title
> ### Aliases: updateSparseLoadingsJ
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (Z_, A_, F_, tauinv_, rho_) 
+ .Call("updateSparseLoadingsJ", Z_, A_, F_, tauinv_, rho_, PACKAGE = "sbfac")
function (Z_, A_, F_, tauinv_, rho_) 
.Call("updateSparseLoadingsJ", Z_, A_, F_, tauinv_, rho_, PACKAGE = "sbfac")
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.506 0.026 1.596 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
